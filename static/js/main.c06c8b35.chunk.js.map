{"version":3,"sources":["TimeSlots/TimeSlotModal.js","TimeSlots/TimeSlots.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["TimeSlotModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputName","inputNum","isChanged","handleSubmit","bind","assertThisInitialized","handleClose","e","field","setState","target","value","prevProps","show","console","log","bookedName","bookedNum","_this2","react_default","a","createElement","Fragment","Modal","onHide","Header","closeButton","Title","Body","className","type","placeholder","defaultValue","onChange","updateInput","Footer","Button","variant","onClick","handleDelete","disabled","React","Component","connect","bookedData","timeslot","modal","activeTimeslot","undefined","name","phoneNumber","dispatch","appointmentInfo","payload","TimeSlotItem","handleClick","key","handleShow","TimeSlots_TimeSlotModal","isBooked","timeslotId","App","TimeSlots_TimeSlots","Boolean","window","location","hostname","match","initalState","9","10","11","12","13","14","15","16","reducer","arguments","length","actions","objectSpread","defineProperty","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c06c8b35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./TimeSlots.css\";\r\n\r\nclass TimeSlotModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputName: \"\",\r\n      inputNum: \"\",\r\n      isChanged: false\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit() {\r\n    if (this.state.inputName === \"\" && this.state.inputNum === \"\") {\r\n      //if input fields are empty even they are changed,\r\n      //submit button will only close, but not update data in redux\r\n      this.props.handleClose();\r\n    } else {\r\n      this.props.handleSubmit(this.state);\r\n    }\r\n  }\r\n\r\n  updateInput(e, field) {\r\n    this.setState({\r\n      isChanged: true\r\n    });\r\n    if (field === \"name\") {\r\n      this.setState({\r\n        inputName: e.target.value\r\n      });\r\n    }\r\n    if (field === \"num\") {\r\n      this.setState({\r\n        inputNum: e.target.value\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.show === false && this.props.show === true) {\r\n      console.log(\"changed from false to true\");\r\n      this.setState({\r\n        inputName: this.props.bookedName,\r\n        inputNum: this.props.bookedNum,\r\n        isChanged: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Modal show={this.props.show} onHide={this.props.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title> Please enter the following information </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"col-form-label\"> Full Name: </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Type full name\"\r\n                defaultValue={this.props.bookedName}\r\n                onChange={e => this.updateInput(e, \"name\")}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"col-form-label\"> Phone Number: </label>\r\n              <input\r\n                type=\"tel\"\r\n                className=\"form-control\"\r\n                placeholder=\"Type phone number\"\r\n                defaultValue={this.props.bookedNum}\r\n                onChange={e => this.updateInput(e, \"num\")}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"danger\" onClick={this.props.handleDelete}>\r\n              Delete\r\n            </Button>\r\n            <Button\r\n              disabled={\r\n                !this.state.isChanged ||\r\n                (this.state.inputName === \"\" && this.state.inputNum === \"\")\r\n              }\r\n              variant=\"info\"\r\n              onClick={() => this.handleSubmit()}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  let bookedData = state.timeslot[state.modal.activeTimeslot];\r\n  let bookedName = \"\";\r\n  let bookedNum = \"\";\r\n  if (bookedData !== undefined) {\r\n    bookedName = bookedData.name;\r\n    bookedNum = bookedData.phoneNumber;\r\n  }\r\n  //this object is saved at this.props.*\r\n  return {\r\n    activeTimeslot: state.modal.activeTimeslot,\r\n    show: state.modal.show,\r\n    bookedName: bookedName,\r\n    bookedNum: bookedNum\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleClose: () =>\r\n      dispatch({\r\n        type: \"CLOSE_MODAL\"\r\n      }),\r\n    handleDelete: () =>\r\n      dispatch({\r\n        type: \"DELETE_APPT\"\r\n      }),\r\n    handleSubmit: appointmentInfo =>\r\n      dispatch({\r\n        type: \"SUBMIT_APPT\",\r\n        payload: appointmentInfo\r\n      })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TimeSlotModal);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TimeSlotModal from \"./TimeSlotModal\";\r\n\r\nimport \"./TimeSlots.css\";\r\n\r\nclass TimeSlotItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(key) {\r\n    console.log(key);\r\n    this.props.handleShow(key);\r\n  }\r\n\r\n  //   var bookingDate = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <TimeSlotModal />\r\n        <ul className=\"list-group timeslot-container\">\r\n          <li\r\n            onClick={() => this.handleClick(9)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[9].isBooked ? \"list-group-item-danger \" : \"\")\r\n            }\r\n          >\r\n            9: 00 - 10: 00 AM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(10)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[10].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            10: 00 - 11: 00 AM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(11)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[11].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            11: 00 - 12: 00 PM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(12)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[12].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            12: 00 - 1: 00 PM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(13)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[13].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            1: 00 - 2: 00 PM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(14)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[14].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            2: 00 - 3: 00 PM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(15)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[15].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            3: 00 - 4: 00 PM\r\n          </li>\r\n          <li\r\n            onClick={() => this.handleClick(16)}\r\n            className={\r\n              \"list-group-item \" +\r\n              (this.props.timeslot[16].isBooked\r\n                ? \"list-group-item-danger \"\r\n                : \"\")\r\n            }\r\n          >\r\n            4: 00 - 5: 00 PM\r\n          </li>\r\n        </ul>\r\n      </>\r\n    );\r\n    // };\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    timeslot: state.timeslot\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleShow: timeslotId =>\r\n      dispatch({ type: \"OPEN_MODAL\", payload: timeslotId })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TimeSlotItem);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport TimeSlots from \"./TimeSlots/TimeSlots\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header> Schedule an Appointment! </header> <TimeSlots />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initalState = {\r\n  //initial appointment data.\r\n  //if we have backend api service with database, we would load data from there.\r\n  modal: {\r\n    activeTimeslot: \"\",\r\n    show: false\r\n  },\r\n  timeslot: {\r\n    9: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    },\r\n    10: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    },\r\n    11: {\r\n      isBooked: true,\r\n      name: \"Laura Chang\",\r\n      phoneNumber: \"123-123-1234\"\r\n    },\r\n    12: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    },\r\n    13: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    },\r\n    14: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    },\r\n    15: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    },\r\n    16: {\r\n      isBooked: false,\r\n      name: \"\",\r\n      phoneNumber: \"\"\r\n    }\r\n  }\r\n};\r\n\r\nconst reducer = (state = initalState, actions) => {\r\n  let key = state.modal.activeTimeslot;\r\n  switch (actions.type) {\r\n    case \"CLOSE_MODAL\":\r\n      return {\r\n        ...state,\r\n        modal: {\r\n          show: false\r\n        }\r\n      };\r\n    case \"OPEN_MODAL\":\r\n      //console.log(\"active key entered: \" + actions.payload);\r\n      return {\r\n        ...state,\r\n        modal: {\r\n          activeTimeslot: actions.payload,\r\n          show: true\r\n        }\r\n      };\r\n    case \"DELETE_APPT\":\r\n      return {\r\n        ...state,\r\n        timeslot: {\r\n          ...state.timeslot,\r\n          [key]: {\r\n            isBooked: false,\r\n            name: \"\",\r\n            phoneNumber: \"\"\r\n          }\r\n        },\r\n        modal: {\r\n          show: false\r\n        }\r\n      };\r\n    case \"SUBMIT_APPT\":\r\n      let payload = actions.payload;\r\n      return {\r\n        ...state,\r\n        timeslot: {\r\n          ...state.timeslot,\r\n          [key]: {\r\n            isBooked: true,\r\n            name: payload.inputName,\r\n            phoneNumber: payload.inputNum\r\n          }\r\n        },\r\n        modal: {\r\n          show: false\r\n        }\r\n      };\r\n  }\r\n\r\n  // if (actions.type === 'CLOSE_MODAL') {\r\n  //     return {\r\n  //         ...state,\r\n  //         modal: {\r\n  //             show: false\r\n  //         }\r\n  //     }\r\n  // }\r\n  // if (actions.type === 'OPEN_MODAL') {\r\n  //     return {\r\n  //         ...state,\r\n  //         modal: {\r\n  //             show: true\r\n  //         }\r\n  //     }\r\n  // }\r\n  // if (actions.type === 'DELETE_APPT') {\r\n  //     var key = 11;\r\n  //     return {\r\n  //         ...state,\r\n  //         timeslot: {\r\n  //             //hardcoded for testing\r\n  //             ...state.timeslot,\r\n  //             [key]: {\r\n  //                 isBooked: false,\r\n  //                 name: \"\",\r\n  //                 phoneNumber: \"\"\r\n  //             }\r\n\r\n  //         },\r\n  //         modal: {\r\n  //             show: false\r\n  //         }\r\n  //     }\r\n  // }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","/*\r\n Author: Laura C.\r\n*/\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport reducer from \"./store/reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}